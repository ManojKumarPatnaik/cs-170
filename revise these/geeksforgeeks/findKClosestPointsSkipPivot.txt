Find k closest elements to a given value


Given a sorted array arr[] and a value X, find the k closest elements to X in arr[]. 
Examples:

Input: K = 4, X = 35
       arr[] = {12, 16, 22, 30, 35, 39, 42, 
               45, 48, 50, 53, 55, 56}
Output: 30 39 42 45
Note that if the element is present in array, then it should not be in output, only the other closest elements are required.

find the crossover point where the elements after this point 
is greater than target and element lesser is less than target


Linaer search: find the pivot and then move in both the direction
to find k closes points
O(n) time

binary search: O(logn + k) time. find crossovr point
 and find k closest in O(lgk) time

 public void printKClosest(int[] arr, int x, int k, int n){
    int l = findCrossOver(arr, 0, n - 1, x);
    int r = l + 1;
    int count = 0;
    
    // if pivot is target, reduce index to skip target
    if (arr[l] == x) 
        l--;
    
    // scan in both direction, and print k closest
    while (l >= 0 && r < n && count < k){
        if (x - arr[k] < arr[r] - x)
            print(arr[l--])
        else
            print(arr[r++])
        count++;
     }

     if no elements are towards the right of pivot
     while (count < k && l >= 0){
        print(arr[l--])
        count++;
     }

     if no elements are towards left of pivot
     while (count < k && r < n){
        print(arr[r++])
        count++;
        }
 |

 int findCrossOver(int[] arr, int low, int high, int x){

    // basee case
    if (arr[high] <= x)
        return high;
    if (arr[low] > x)
        return low;
    
    int mid = (low + high)/2;

    // if arr[mid] == x return mid;
    if (arr[mid] <= x && arr[mid + 1] > x)
        return mid;
    
    // otherwise search towards the right of mid
    if (arr[mid] < x)
        return findCrossOver(arr, mid + 1, high, x);
    else
        return findCrossOver(arr, low, mid - 1, x);
 }