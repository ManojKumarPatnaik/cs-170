// binary tree upside down
//http://bangbingsyb.blogspot.com/2014/11/leetcode-binary-tree-upside-down.html

Binary Tree Upside Down
Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.
For example:
Given a binary tree {1,2,3,4,5},
    1
   / \
  2   3
 / \
4   5
return the root of the binary tree [4,5,2,#,#,3,1].
   4
  / \
 5   2
    / \
   3   1 

   
public TreeNode upsideDownBinaryTree(TreeNode root){
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode head = new TreeNode(0);
        TreeNode cur = head;
        while(root!=null){
            stack.push(root);
            root = root.left;
        }
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            cur.right = node;
            if(!stack.isEmpty())
                node.left = stack.peek().right;
            cur = cur.right;
        }
        return head.right;
    }

	
	public TreeNode up(TreeNode node){
		if (root == null || )
		return root;
		Deque<TreeNode> stack = new LinkedList<>();
		while (root != null){
		stack.push(root);
		root = root.left;}
		
		TreeNode node = new TreeNode(0);
		while (!stack.isEmpty()){
			node.right = stack.pop();
			if (!stack.isEmpty())
				node.left = stack.peek().right;
			node = node.right;
		}
	}